// Advanced Do-While Loop Tests
// Tests loop behavior, nested loops, and complex conditions

// Test 1: Basic do-while execution
let count1 = 0;
do {
    count1 = count1 + 1;
} while count1 < 5;
assert(count1 == 5);

// Test 2: Do-while with single iteration
let count2 = 10;
do {
    count2 = count2 + 1;
} while count2 < 5;
assert(count2 == 11);

// Test 3: Do-while with complex condition
let count3 = 0;
let sum = 0;
do {
    count3 = count3 + 1;
    sum = sum + count3;
} while count3 < 10;
assert(count3 == 10);
assert(sum == 55);

// Test 4: Nested do-while loops
let outer = 0;
let inner = 0;
let total = 0;
do {
    inner = 0;
    do {
        total = total + 1;
        inner = inner + 1;
    } while inner < 3;
    outer = outer + 1;
} while outer < 3;
assert(total == 9);

// Test 5: Do-while with break-like condition
let count5 = 0;
do {
    count5 = count5 + 1;
} while count5 < 100;
assert(count5 == 100);

// Test 6: Do-while in function
fn countUntil(limit: int) -> int {
    let count = 0;
    do {
        count = count + 1;
    } while count < limit;
    return count;
}

assert(countUntil(7) == 7);
assert(countUntil(15) == 15);

// Test 7: Do-while with multiple statements in body
let m1 = 0;
let m2 = 0;
do {
    m1 = m1 + 2;
    m2 = m2 + 3;
} while m1 < 10;
assert(m1 == 10);
assert(m2 == 15);

// Test 8: Do-while with arithmetic in condition
let val8 = 1;
do {
    val8 = val8 * 2;
} while val8 < 64;
assert(val8 == 64);

// Test 9: Do-while with decreasing counter
let dec = 10;
do {
    dec = dec - 1;
} while dec > 0;
assert(dec == 0);

// Test 10: Multiple do-while loops
let l1 = 0;
do {
    l1 = l1 + 1;
} while l1 < 3;

let l2 = 0;
do {
    l2 = l2 + 2;
} while l2 < 6;

assert(l1 == 3);
assert(l2 == 6);

// Test 11: Do-while with complex arithmetic
let comp = 1;
do {
    comp = comp + comp;
} while comp < 100;
assert(comp == 128);

// Test 12: Do-while calling functions
fn increment(n: int) -> int {
    return n + 1;
}

let func = 0;
do {
    func = increment(func);
} while func < 5;
assert(func == 5);

// Test 13: Do-while with boolean condition
let bool = 0;
let iterations = 0;
do {
    iterations = iterations + 1;
} while bool == 0;
assert(iterations == 1);

// Test 14: Long-running do-while
let longCount = 0;
do {
    longCount = longCount + 1;
} while longCount < 1000;
assert(longCount == 1000);

// Test 15: Do-while with modulo
let mod = 0;
let modCount = 0;
do {
    modCount = modCount + 1;
    mod = modCount;
} while mod < 20;
assert(mod == 20);

print("âœ“ All advanced do-while tests passed!");

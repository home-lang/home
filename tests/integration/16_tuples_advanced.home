// Advanced Tuple Tests
// Tests tuple creation, nesting, and operations

// Test 1: Empty tuple
let empty = ();

// Test 2: Single element tuple
let single = (42,);

// Test 3: Pair tuple
let pair = (1, 2);

// Test 4: Triple tuple
let triple = (1, 2, 3);

// Test 5: Large tuple
let large = (1, 2, 3, 4, 5, 6, 7, 8);

// Test 6: Nested tuples
let nested = ((1, 2), (3, 4));

// Test 7: Deep nesting
let deep = (((1, 2), 3), 4);

// Test 8: Tuple with different value types
let mixed = (0, 1, 2);

// Test 9: Tuple in variable assignment chain
let t1 = (10, 20);
let t2 = t1;

// Test 10: Tuple with arithmetic results
let computed = (1 + 1, 2 * 2, 3 + 3);

// Test 11: Tuple with function calls
fn getValue(n: int) -> int {
    return n * 10;
}

let funcTuple = (getValue(1), getValue(2), getValue(3));

// Test 12: Tuple comparison setup
let tuple1 = (1, 2, 3);
let tuple2 = (4, 5, 6);

// Test 13: Tuple in conditional
let tupleCondition = (1, 2);
let hasTuple = tupleCondition ? 1 : 0;

// Test 14: Tuple with ternary
let selectTuple = true ? (1, 2) : (3, 4);

// Test 15: Multiple tuple declarations
let t3 = (100, 200);
let t4 = (300, 400);
let t5 = (500, 600);

// Test 16: Tuple with boolean values
let boolTuple = (1, 0, 1);

// Test 17: Tuple with large numbers
let bigTuple = (1000, 2000, 3000);

// Test 18: Consecutive tuples
let seq1 = (1, 2);
let seq2 = (3, 4);
let seq3 = (5, 6);

// Test 19: Tuple with negative numbers
let negTuple = (-1, -2, -3);

// Test 20: Complex tuple expression
let complexTuple = (1 + 2, 3 * 4, 5 - 1);

print("âœ“ All advanced tuple tests passed!");

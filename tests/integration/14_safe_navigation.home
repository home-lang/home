// Safe Navigation Operator Tests
// Tests null-safe member access

// Test 1: Basic safe navigation with non-null
let obj1 = 100;
let result1 = obj1?.value;

// Test 2: Safe navigation with null (returns void/0)
let obj2 = 0;
let result2 = obj2?.value;
assert(result2 == 0);

// Test 3: Chained safe navigation
let obj3 = 50;
let result3 = obj3?.field1?.field2;

// Test 4: Safe navigation in conditional
let obj4 = 75;
let hasValue = obj4?.data;

// Test 5: Safe navigation with fallback
let obj5 = 0;
let safe = obj5?.value ?? 999;
assert(safe == 999);

// Test 6: Multiple safe navigation in expression
let o1 = 10;
let o2 = 20;
let combined = (o1?.val ?? 5) + (o2?.val ?? 10);
assert(combined == 15);

// Test 7: Safe navigation in function parameter
fn processValue(obj: int) -> int {
    return obj?.data ?? 0;
}

let result7 = processValue(0);
assert(result7 == 0);

// Test 8: Deep safe navigation chain
let root = 100;
let deep = root?.level1?.level2?.level3;

// Test 9: Safe navigation with ternary
let obj9 = 50;
let conditional = obj9?.value ? 1 : 0;

// Test 10: Mixed safe navigation
let obj10 = 25;
let val10 = obj10?.a ?? obj10?.b ?? 100;
assert(val10 == 100);

print("âœ“ All safe navigation tests passed!");

// Cross-platform Support Test
// Tests that code compiles and runs on multiple architectures

// Test 1: Basic arithmetic (all platforms)
let x = 10;
let y = 20;
let sum = x + y;
assert(sum == 30);

// Test 2: Function calls (all platforms)
fn add(a: int, b: int) -> int {
    return a + b;
}

let result = add(5, 7);
assert(result == 12);

// Test 3: Struct operations (all platforms)
struct Point {
    x: int,
    y: int,
}

let p = Point { x: 10, y: 20 };
assert(p.x == 10);
assert(p.y == 20);

// Test 4: Array operations (all platforms)
let numbers = [1, 2, 3, 4, 5];
assert(numbers[0] == 1);
assert(numbers[4] == 5);
assert(numbers.len() == 5);

// Test 5: String operations (all platforms)
let message = "Hello, Home!";
assert(message.len() == 11);
assert(message.startsWith("Hello"));

// Test 6: Conditional logic (all platforms)
let value = if (x > 5) { 100 } else { 0 };
assert(value == 100);

// Test 7: Loops (all platforms)
let count = 0;
for (let i = 0; i < 5; i = i + 1) {
    count = count + 1;
}
assert(count == 5);

// Test 8: Recursion (all platforms)
fn factorial(n: int) -> int {
    if (n <= 1) {
        return 1;
    }
    return n * factorial(n - 1);
}

let fact = factorial(5);
assert(fact == 120);

// Test 9: Generics (all platforms)
fn identity<T>(value: T) -> T {
    return value;
}

let int_result = identity<int>(42);
assert(int_result == 42);

let string_result = identity<string>("test");
assert(string_result == "test");

// Test 10: Async operations (all platforms with runtime)
async fn asyncValue() -> int {
    return 42;
}

let async_result = await asyncValue();
assert(async_result == 42);

print("âœ“ All cross-platform tests passed!");
print("This code runs on x64, ARM64, and WASM targets!");

// Advanced Switch Statement Tests
// Tests multi-pattern matching, nested switches, and edge cases

// Test 1: Basic switch with multiple patterns
let value = 2;
let result = 0;
switch value {
    case 1, 2, 3: {
        result = 100;
    },
    default: {
        result = 0;
    }
}
assert(result == 100);

// Test 2: Switch with single pattern
let val2 = 5;
let res2 = 0;
switch val2 {
    case 5: {
        res2 = 50;
    },
    case 10: {
        res2 = 100;
    },
    default: {
        res2 = 0;
    }
}
assert(res2 == 50);

// Test 3: Switch with many patterns
let val3 = 7;
let res3 = 0;
switch val3 {
    case 1, 2, 3, 4, 5: {
        res3 = 1;
    },
    case 6, 7, 8, 9, 10: {
        res3 = 2;
    },
    default: {
        res3 = 3;
    }
}
assert(res3 == 2);

// Test 4: Switch with default only
let val4 = 999;
let res4 = 0;
switch val4 {
    default: {
        res4 = 777;
    }
}
assert(res4 == 777);

// Test 5: Nested switch
let outer = 1;
let inner = 2;
let nested = 0;
switch outer {
    case 1: {
        switch inner {
            case 2: {
                nested = 12;
            },
            default: {
                nested = 10;
            }
        }
    },
    default: {
        nested = 0;
    }
}
assert(nested == 12);

// Test 6: Switch in function
fn categorize(num: int) -> int {
    let category = 0;
    switch num {
        case 0, 1, 2: {
            category = 1;
        },
        case 3, 4, 5: {
            category = 2;
        },
        case 6, 7, 8: {
            category = 3;
        },
        default: {
            category = 4;
        }
    }
    return category;
}

assert(categorize(1) == 1);
assert(categorize(4) == 2);
assert(categorize(7) == 3);
assert(categorize(99) == 4);

// Test 7: Switch with arithmetic in cases
let val7 = 10;
let res7 = 0;
switch val7 {
    case 10: {
        res7 = val7 * 2;
    },
    default: {
        res7 = val7;
    }
}
assert(res7 == 20);

// Test 8: Multiple switches in sequence
let s1 = 1;
let r1 = 0;
switch s1 {
    case 1: { r1 = 10; },
    default: { r1 = 0; }
}

let s2 = 2;
let r2 = 0;
switch s2 {
    case 2: { r2 = 20; },
    default: { r2 = 0; }
}

assert(r1 == 10);
assert(r2 == 20);

// Test 9: Switch with large pattern list
let val9 = 15;
let res9 = 0;
switch val9 {
    case 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20: {
        res9 = 999;
    },
    default: {
        res9 = 0;
    }
}
assert(res9 == 999);

// Test 10: Switch with variable modification
let mutable = 5;
switch mutable {
    case 5: {
        mutable = mutable + 10;
    },
    default: {
        mutable = 0;
    }
}
assert(mutable == 15);

print("âœ“ All advanced switch tests passed!");

/* Higher-Half Kernel Linker Script Template
 * Kernel at -2GB (0xffff800000000000)
 * Boot code at physical 1MB
 */

OUTPUT_FORMAT("elf64-x86-64")
OUTPUT_ARCH(i386:x86-64)
ENTRY(_start)

MEMORY
{
  /* Physical memory for boot code */
  boot (rx) : ORIGIN = 0x0000000000000000, LENGTH = 0x0000000000100000

  /* Higher-half kernel space */
  kernel (rwx) : ORIGIN = 0xffff800000000000, LENGTH = 0x40000000

  /* User space */
  user (rwx) : ORIGIN = 0x0000000000001000, LENGTH = 0x00007fffffffffff
}

SECTIONS
{
  /* Boot code (physical addresses) */
  .boot 0x0000000000100000 : ALIGN(4096)
  {
    *(.boot*)
    *(.multiboot*)
  } > boot

  /* Kernel code (virtual addresses) */
  .text 0xffff800000000000 : AT(0x0000000000200000) ALIGN(4096)
  {
    *(.text .text.*)
  } > kernel

  /* Read-only data */
  .rodata : ALIGN(4096)
  {
    *(.rodata .rodata.*)
  } > kernel

  /* Initialized data */
  .data : ALIGN(4096)
  {
    *(.data .data.*)
  } > kernel

  /* Uninitialized data */
  .bss : ALIGN(4096)
  {
    *(.bss .bss.*)
    *(COMMON)
  } > kernel

  /* Symbols */
  PROVIDE(__kernel_physical_start = 0x0000000000200000);
  PROVIDE(__kernel_virtual_start = 0xffff800000000000);
  PROVIDE(__kernel_start = ADDR(.text));
  PROVIDE(__kernel_end = ADDR(.bss) + SIZEOF(.bss));
  PROVIDE(__text_start = ADDR(.text));
  PROVIDE(__text_end = ADDR(.text) + SIZEOF(.text));
  PROVIDE(__rodata_start = ADDR(.rodata));
  PROVIDE(__rodata_end = ADDR(.rodata) + SIZEOF(.rodata));
  PROVIDE(__data_start = ADDR(.data));
  PROVIDE(__data_end = ADDR(.data) + SIZEOF(.data));
  PROVIDE(__bss_start = ADDR(.bss));
  PROVIDE(__bss_end = ADDR(.bss) + SIZEOF(.bss));
}

/DISCARD/ :
{
  *(.comment)
  *(.note*)
  *(.eh_frame)
}

/* Embedded System Linker Script Template
 * For ARM Cortex-M microcontrollers
 * Flash at 0x08000000, SRAM at 0x20000000
 */

OUTPUT_FORMAT("elf32-littlearm")
OUTPUT_ARCH(arm)
ENTRY(Reset_Handler)

MEMORY
{
  /* Flash memory (512KB) */
  flash (rx) : ORIGIN = 0x08000000, LENGTH = 512K

  /* SRAM (128KB) */
  sram (rwx) : ORIGIN = 0x20000000, LENGTH = 128K
}

/* Stack size (8KB) */
_stack_size = 8K;

SECTIONS
{
  /* Vector table must be at start of flash */
  .vectors :
  {
    KEEP(*(.vectors))
  } > flash

  /* Program code */
  .text :
  {
    *(.text .text.*)
    *(.rodata .rodata.*)

    /* C++ support (if needed) */
    *(.init)
    *(.fini)
    *(.eh_frame)
  } > flash

  /* ARM unwinding (exception handling) */
  .ARM.extab :
  {
    *(.ARM.extab* .gnu.linkonce.armextab.*)
  } > flash

  .ARM.exidx :
  {
    __exidx_start = .;
    *(.ARM.exidx* .gnu.linkonce.armexidx.*)
    __exidx_end = .;
  } > flash

  /* Initialized data (loaded from flash to SRAM) */
  .data : AT(ADDR(.text) + SIZEOF(.text))
  {
    _sdata = .;
    *(.data .data.*)
    _edata = .;
  } > sram

  /* Uninitialized data */
  .bss (NOLOAD) :
  {
    _sbss = .;
    *(.bss .bss.*)
    *(COMMON)
    _ebss = .;
  } > sram

  /* Heap */
  .heap (NOLOAD) :
  {
    _heap_start = .;
    . = . + 16K;
    _heap_end = .;
  } > sram

  /* Stack (grows downward) */
  .stack (NOLOAD) :
  {
    . = . + _stack_size;
    _stack_top = .;
  } > sram

  /* Symbols */
  _stext = ADDR(.text);
  _etext = ADDR(.text) + SIZEOF(.text);
  _sidata = LOADADDR(.data);
}

/DISCARD/ :
{
  *(.comment)
  *(.note*)
}

{
  "name": "Home",
  "scopeName": "source.home",
  "fileTypes": ["ion"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#functions" },
    { "include": "#types" },
    { "include": "#operators" },
    { "include": "#punctuation" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.home",
          "match": "//.*$"
        },
        {
          "name": "comment.block.home",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.home",
          "match": "\\b(if|else|for|while|loop|break|continue|return|match|async|await|trait|impl)\\b"
        },
        {
          "name": "keyword.declaration.home",
          "match": "\\b(let|mut|fn|struct|enum|type|const|static|use|pub|mod|comptime|macro)\\b"
        },
        {
          "name": "keyword.other.home",
          "match": "\\b(as|in|where|unsafe|move|ref)\\b"
        },
        {
          "name": "storage.modifier.home",
          "match": "\\b(pub|mut|const|async)\\b"
        },
        {
          "name": "constant.language.home",
          "match": "\\b(true|false|null|None|Some|Ok|Err)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.home",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.home",
              "match": "\\\\(n|r|t|\\\\|\"|'|0|x[0-9a-fA-F]{2}|u\\{[0-9a-fA-F]+\\})"
            }
          ]
        },
        {
          "name": "string.quoted.single.home",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.home",
              "match": "\\\\(n|r|t|\\\\|\"|'|0|x[0-9a-fA-F]{2})"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.home",
          "match": "\\b0x[0-9a-fA-F_]+\\b"
        },
        {
          "name": "constant.numeric.binary.home",
          "match": "\\b0b[01_]+\\b"
        },
        {
          "name": "constant.numeric.octal.home",
          "match": "\\b0o[0-7_]+\\b"
        },
        {
          "name": "constant.numeric.float.home",
          "match": "\\b[0-9][0-9_]*\\.[0-9][0-9_]*([eE][+-]?[0-9_]+)?\\b"
        },
        {
          "name": "constant.numeric.integer.home",
          "match": "\\b[0-9][0-9_]*\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.home",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        },
        {
          "name": "support.function.builtin.home",
          "match": "\\b(print|println|assert|panic|todo|unimplemented)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive.home",
          "match": "\\b(int|float|bool|string|void|u8|u16|u32|u64|i8|i16|i32|i64|f32|f64|usize|isize)\\b"
        },
        {
          "name": "storage.type.generic.home",
          "match": "\\b(Vec|HashMap|Result|Option|Box|Rc|Arc)\\b"
        },
        {
          "name": "entity.name.type.home",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.home",
          "match": "[+\\-*/%]"
        },
        {
          "name": "keyword.operator.comparison.home",
          "match": "(==|!=|<|>|<=|>=)"
        },
        {
          "name": "keyword.operator.logical.home",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.bitwise.home",
          "match": "(&|\\||\\^|<<|>>)"
        },
        {
          "name": "keyword.operator.assignment.home",
          "match": "(=|\\+=|-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=)"
        },
        {
          "name": "keyword.operator.range.home",
          "match": "(\\.\\.|\\.\\.\\.)"
        },
        {
          "name": "keyword.operator.access.home",
          "match": "(\\.|::)"
        },
        {
          "name": "keyword.operator.borrow.home",
          "match": "&(mut\\s+)?"
        },
        {
          "name": "keyword.operator.question.home",
          "match": "\\?"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.section.braces.home",
          "match": "[{}]"
        },
        {
          "name": "punctuation.section.brackets.home",
          "match": "[\\[\\]]"
        },
        {
          "name": "punctuation.section.parens.home",
          "match": "[()]"
        },
        {
          "name": "punctuation.separator.comma.home",
          "match": ","
        },
        {
          "name": "punctuation.terminator.semicolon.home",
          "match": ";"
        },
        {
          "name": "punctuation.separator.colon.home",
          "match": ":"
        }
      ]
    }
  }
}

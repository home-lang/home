// Home Code Generation Package
// Exports all codegen modules

pub const native_codegen = @import("native_codegen.zig");
pub const kernel_codegen = @import("kernel_codegen.zig");
pub const home_kernel_codegen = @import("home_kernel_codegen.zig");
pub const llvm_codegen = @import("llvm_codegen.zig");
pub const wasm = @import("wasm.zig");
pub const arm64 = @import("arm64.zig");
pub const x64 = @import("x64.zig");
pub const elf = @import("elf.zig");
pub const optimizer = @import("optimizer.zig");
pub const regalloc = @import("regalloc.zig");
pub const instruction_selection = @import("instruction_selection.zig");
pub const loop_optimizer = @import("loop_optimizer.zig");
pub const inliner = @import("inliner.zig");
pub const instruction_scheduler = @import("instruction_scheduler.zig");
pub const vectorizer = @import("vectorizer.zig");

// Re-export commonly used types
pub const NativeCodegen = native_codegen.NativeCodegen;
pub const HomeKernelCodegen = home_kernel_codegen.HomeKernelCodegen;
pub const LLVMCodegen = llvm_codegen.LLVMCodegen;
pub const WasmCodegen = wasm.WasmCodegen;
pub const CodegenError = native_codegen.CodegenError;
pub const Optimizer = optimizer.Optimizer;
pub const OptLevel = optimizer.OptLevel;
pub const GraphColoringAllocator = regalloc.GraphColoringAllocator;
pub const RegisterAllocation = regalloc.RegisterAllocation;
pub const InstructionSelector = instruction_selection.InstructionSelector;
pub const LoopUnroller = loop_optimizer.LoopUnroller;
pub const FunctionInliner = inliner.FunctionInliner;
pub const InstructionScheduler = instruction_scheduler.InstructionScheduler;
pub const Vectorizer = vectorizer.Vectorizer;

name: Releaser

on:
  push:
    tags:
      - 'v*'

jobs:
  build-home-binaries:
    name: Build Home Compiler Binaries
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds (cross-compile from Ubuntu)
          - runner: ubuntu-latest
            target: x86_64-linux-gnu
            artifact-name: home-linux-x64
            binary-name: home
            ext: ''
          - runner: ubuntu-latest
            target: aarch64-linux-gnu
            artifact-name: home-linux-arm64
            binary-name: home
            ext: ''

          # macOS builds (native builds)
          - runner: macos-13  # Intel Mac
            target: x86_64-macos
            artifact-name: home-darwin-x64
            binary-name: home
            ext: ''
          - runner: macos-14  # Apple Silicon Mac
            target: aarch64-macos
            artifact-name: home-darwin-arm64
            binary-name: home
            ext: ''

          # Windows builds (native + cross-compile)
          - runner: windows-latest
            target: x86_64-windows-msvc
            artifact-name: home-windows-x64
            binary-name: home
            ext: '.exe'
          - runner: ubuntu-latest
            target: aarch64-windows-gnu
            artifact-name: home-windows-arm64
            binary-name: home
            ext: '.exe'

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Home
        uses: ./packages/action
        with:
          home-version: 'latest'
          cache: 'true'

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: '0.15.1'

      - name: Verify Zig Installation
        run: zig version

      - name: Build Home Compiler (Native)
        if: matrix.runner == matrix.runner && (matrix.target == 'x86_64-linux-gnu' || matrix.target == 'x86_64-macos' || matrix.target == 'aarch64-macos' || matrix.target == 'x86_64-windows-msvc')
        run: zig build -Doptimize=ReleaseFast

      - name: Build Home Compiler (Cross-compile)
        if: matrix.target == 'aarch64-linux-gnu' || matrix.target == 'aarch64-windows-gnu'
        run: zig build -Doptimize=ReleaseFast -Dtarget=${{ matrix.target }}

      - name: Run Tests (Native builds only)
        if: matrix.target == 'x86_64-linux-gnu' || matrix.target == 'x86_64-macos' || matrix.target == 'aarch64-macos' || matrix.target == 'x86_64-windows-msvc'
        run: zig build test --summary all

      - name: Package Binary (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p release
          cp zig-out/bin/${{ matrix.binary-name }}${{ matrix.ext }} release/
          chmod +x release/${{ matrix.binary-name }}${{ matrix.ext }}
          cd release
          tar -czf ../${{ matrix.artifact-name }}.tar.gz .
          cd ..

      - name: Package Binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path release
          Copy-Item zig-out/bin/${{ matrix.binary-name }}${{ matrix.ext }} release/
          Compress-Archive -Path release/* -DestinationPath ${{ matrix.artifact-name }}.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: |
            ${{ matrix.artifact-name }}.tar.gz
            ${{ matrix.artifact-name }}.zip
          if-no-files-found: ignore

  npm:
    name: npm
    runs-on: ubuntu-latest
    needs: [build-home-binaries]

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        # env:
        #   BUN_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        with:
          bun-version: latest

      - name: Use cached node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            node-modules-

      - name: Install Dependencies
        run: bun install

      - name: Publish to npm
        run: ./scripts/publish.sh
        env:
          BUN_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

      - name: Download Home Binaries
        uses: actions/download-artifact@v4
        with:
          path: home-binaries

      - name: Create GitHub Release
        uses: stacksjs/action-releaser@v1.2.7
        with:
          files: |
            home-binaries/ion-linux-x64/*.tar.gz
            home-binaries/ion-linux-arm64/*.tar.gz
            home-binaries/ion-windows-x64/*.zip
            home-binaries/ion-windows-arm64/*.zip
            home-binaries/ion-darwin-x64/*.tar.gz
            home-binaries/ion-darwin-arm64/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

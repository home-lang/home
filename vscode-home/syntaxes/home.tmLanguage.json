{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Home",
  "scopeName": "source.home",
  "patterns": [
    { "include": "#comments" },
    { "include": "#attributes" },
    { "include": "#keywords" },
    { "include": "#storage-types" },
    { "include": "#storage-modifiers" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#constants" },
    { "include": "#functions" },
    { "include": "#types" },
    { "include": "#operators" },
    { "include": "#punctuation" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.home",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block.home",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "attributes": {
      "patterns": [
        {
          "name": "meta.attribute.home",
          "match": "@(test|TypeOf|sizeOf|alignOf|offsetOf|typeInfo|fieldName|fieldType|intFromPtr|ptrFromInt|truncate|as|bitCast)\\b",
          "captures": {
            "0": { "name": "entity.name.function.decorator.home" }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.flow.home",
          "match": "\\b(if|else|while|loop|do|for|in|break|continue|return|match|switch|case|default)\\b"
        },
        {
          "name": "keyword.control.trycatch.home",
          "match": "\\b(try|catch|finally)\\b"
        },
        {
          "name": "keyword.control.async.home",
          "match": "\\b(async|await)\\b"
        },
        {
          "name": "keyword.control.import.home",
          "match": "\\b(import)\\b"
        },
        {
          "name": "keyword.other.home",
          "match": "\\b(comptime|defer|unsafe|asm|where|move)\\b"
        },
        {
          "name": "variable.language.self.home",
          "match": "\\b(self|Self)\\b"
        },
        {
          "name": "constant.language.boolean.home",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "storage-types": {
      "patterns": [
        {
          "name": "storage.type.home",
          "match": "\\b(fn|struct|enum|union|type|trait|impl|dyn)\\b"
        },
        {
          "name": "storage.type.numeric.home",
          "match": "\\b(i8|i16|i32|i64|i128|u8|u16|u32|u64|u128|f32|f64|isize|usize)\\b"
        },
        {
          "name": "storage.type.primitive.home",
          "match": "\\b(int|uint|float|double|bool|string|char|void)\\b"
        }
      ]
    },
    "storage-modifiers": {
      "patterns": [
        {
          "name": "storage.modifier.home",
          "match": "\\b(let|const|mut|pub|priv)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.home",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.home",
              "match": "\\\\(n|t|r|\\\"|\\\\|\\'|0|x[0-9A-Fa-f]{2}|u\\{[0-9A-Fa-f]+\\})"
            },
            {
              "name": "invalid.illegal.unknown-escape.home",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.home",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.home",
              "match": "\\\\(n|t|r|\\\"|\\\\|\\'|0|x[0-9A-Fa-f]{2}|u\\{[0-9A-Fa-f]+\\})"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.home",
          "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.hex.home",
          "match": "\\b0x[0-9A-Fa-f_]+\\b"
        },
        {
          "name": "constant.numeric.binary.home",
          "match": "\\b0b[01_]+\\b"
        },
        {
          "name": "constant.numeric.octal.home",
          "match": "\\b0o[0-7_]+\\b"
        },
        {
          "name": "constant.numeric.integer.home",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.home",
          "match": "\\b(true|false|null|undefined|None|Some|Ok|Err)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.home",
          "begin": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "storage.type.function.home" },
            "2": { "name": "entity.name.function.home" }
          },
          "end": "(?<=\\})|(?=;)",
          "patterns": [
            { "include": "#generic-parameters" },
            { "include": "#function-parameters" },
            { "include": "#return-type" },
            { "include": "#where-clause" },
            { "include": "$self" }
          ]
        },
        {
          "name": "meta.function.call.home",
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
          "captures": {
            "1": { "name": "entity.name.function.home" }
          }
        }
      ]
    },
    "generic-parameters": {
      "patterns": [
        {
          "name": "meta.generic.home",
          "begin": "<",
          "end": ">",
          "patterns": [
            {
              "name": "entity.name.type.parameter.home",
              "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
            },
            { "include": "#keywords" },
            { "include": "$self" }
          ]
        }
      ]
    },
    "function-parameters": {
      "patterns": [
        {
          "name": "meta.function.parameters.home",
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "name": "variable.parameter.home",
              "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*:"
            },
            { "include": "#storage-types" },
            { "include": "#types" },
            { "include": "$self" }
          ]
        }
      ]
    },
    "return-type": {
      "patterns": [
        {
          "name": "meta.function.return-type.home",
          "begin": "->",
          "end": "(?=\\{|where)",
          "beginCaptures": {
            "0": { "name": "keyword.operator.arrow.home" }
          },
          "patterns": [
            { "include": "#storage-types" },
            { "include": "#types" },
            { "include": "$self" }
          ]
        }
      ]
    },
    "where-clause": {
      "patterns": [
        {
          "name": "meta.where-clause.home",
          "begin": "\\b(where)\\b",
          "beginCaptures": {
            "1": { "name": "keyword.other.where.home" }
          },
          "end": "(?=\\{)",
          "patterns": [
            { "include": "#types" },
            { "include": "#keywords" },
            { "include": "$self" }
          ]
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "meta.struct.home",
          "begin": "\\b(struct)\\s+([A-Z][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "storage.type.struct.home" },
            "2": { "name": "entity.name.type.struct.home" }
          },
          "end": "(?<=\\})|(?=;)",
          "patterns": [
            { "include": "#generic-parameters" },
            { "include": "$self" }
          ]
        },
        {
          "name": "meta.enum.home",
          "begin": "\\b(enum)\\s+([A-Z][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "storage.type.enum.home" },
            "2": { "name": "entity.name.type.enum.home" }
          },
          "end": "(?<=\\})|(?=;)",
          "patterns": [
            { "include": "#generic-parameters" },
            { "include": "$self" }
          ]
        },
        {
          "name": "meta.union.home",
          "begin": "\\b(union)\\s+([A-Z][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "storage.type.union.home" },
            "2": { "name": "entity.name.type.union.home" }
          },
          "end": "(?<=\\})|(?=;)",
          "patterns": [
            { "include": "$self" }
          ]
        },
        {
          "name": "meta.trait.home",
          "begin": "\\b(trait)\\s+([A-Z][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "storage.type.trait.home" },
            "2": { "name": "entity.name.type.trait.home" }
          },
          "end": "(?<=\\})|(?=;)",
          "patterns": [
            { "include": "#generic-parameters" },
            { "include": "$self" }
          ]
        },
        {
          "name": "meta.impl.home",
          "begin": "\\b(impl)\\b",
          "beginCaptures": {
            "1": { "name": "storage.type.impl.home" }
          },
          "end": "(?<=\\})",
          "patterns": [
            {
              "match": "\\b(for)\\b",
              "name": "keyword.other.for.home"
            },
            { "include": "#types" },
            { "include": "$self" }
          ]
        },
        {
          "name": "entity.name.type.home",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arrow.home",
          "match": "->"
        },
        {
          "name": "keyword.operator.pipe.home",
          "match": "\\|>"
        },
        {
          "name": "keyword.operator.range.home",
          "match": "\\.\\.|\\.\\.="
        },
        {
          "name": "keyword.operator.spread.home",
          "match": "\\.\\.\\."
        },
        {
          "name": "keyword.operator.safe-navigation.home",
          "match": "\\?\\."
        },
        {
          "name": "keyword.operator.null-coalesce.home",
          "match": "\\?\\?"
        },
        {
          "name": "keyword.operator.try.home",
          "match": "\\?"
        },
        {
          "name": "keyword.operator.comparison.home",
          "match": "==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.logical.home",
          "match": "&&|\\|\\||!|\\band\\b|\\bor\\b"
        },
        {
          "name": "keyword.operator.bitwise.home",
          "match": "&|\\||\\^|~|<<|>>"
        },
        {
          "name": "keyword.operator.arithmetic.home",
          "match": "\\+|-|\\*|/|%"
        },
        {
          "name": "keyword.operator.assignment.home",
          "match": "=|\\+=|-=|\\*=|/=|%="
        },
        {
          "name": "keyword.operator.member.home",
          "match": "\\."
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.comma.home",
          "match": ","
        },
        {
          "name": "punctuation.terminator.semicolon.home",
          "match": ";"
        },
        {
          "name": "punctuation.separator.colon.home",
          "match": ":"
        },
        {
          "name": "punctuation.brackets.round.home",
          "match": "\\(|\\)"
        },
        {
          "name": "punctuation.brackets.curly.home",
          "match": "\\{|\\}"
        },
        {
          "name": "punctuation.brackets.square.home",
          "match": "\\[|\\]"
        }
      ]
    }
  }
}
